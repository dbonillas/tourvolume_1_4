<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('TvConcertgoerFriends', 'doctrine');

/**
 * BaseTvConcertgoerFriends
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $userid
 * @property string $user
 * @property integer $friendid
 * @property string $friendname
 * @property integer $message
 * @property date $dateadded
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property TvConcertgoer $TvConcertgoer
 * @property TvConcertgoer $TvConcertgoer_2
 * @property UserAssets $UserAssets
 * 
 * @method integer              getId()              Returns the current record's "id" value
 * @method integer              getUserid()          Returns the current record's "userid" value
 * @method string               getUser()            Returns the current record's "user" value
 * @method integer              getFriendid()        Returns the current record's "friendid" value
 * @method string               getFriendname()      Returns the current record's "friendname" value
 * @method integer              getMessage()         Returns the current record's "message" value
 * @method date                 getDateadded()       Returns the current record's "dateadded" value
 * @method timestamp            getCreatedAt()       Returns the current record's "created_at" value
 * @method timestamp            getUpdatedAt()       Returns the current record's "updated_at" value
 * @method TvConcertgoer        getTvConcertgoer()   Returns the current record's "TvConcertgoer" value
 * @method TvConcertgoer        getTvConcertgoer2()  Returns the current record's "TvConcertgoer_2" value
 * @method UserAssets           getUserAssets()      Returns the current record's "UserAssets" value
 * @method TvConcertgoerFriends setId()              Sets the current record's "id" value
 * @method TvConcertgoerFriends setUserid()          Sets the current record's "userid" value
 * @method TvConcertgoerFriends setUser()            Sets the current record's "user" value
 * @method TvConcertgoerFriends setFriendid()        Sets the current record's "friendid" value
 * @method TvConcertgoerFriends setFriendname()      Sets the current record's "friendname" value
 * @method TvConcertgoerFriends setMessage()         Sets the current record's "message" value
 * @method TvConcertgoerFriends setDateadded()       Sets the current record's "dateadded" value
 * @method TvConcertgoerFriends setCreatedAt()       Sets the current record's "created_at" value
 * @method TvConcertgoerFriends setUpdatedAt()       Sets the current record's "updated_at" value
 * @method TvConcertgoerFriends setTvConcertgoer()   Sets the current record's "TvConcertgoer" value
 * @method TvConcertgoerFriends setTvConcertgoer2()  Sets the current record's "TvConcertgoer_2" value
 * @method TvConcertgoerFriends setUserAssets()      Sets the current record's "UserAssets" value
 * 
 * @package    tourvolume
 * @subpackage model
 * @author     Dave Bonillas
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTvConcertgoerFriends extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('tv_concertgoer_friends');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('userid', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('user', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('friendid', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('friendname', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('message', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '3',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('dateadded', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('TvConcertgoer', array(
             'local' => 'userid',
             'foreign' => 'userid'));

        $this->hasOne('TvConcertgoer as TvConcertgoer_2', array(
             'local' => 'friendid',
             'foreign' => 'userid'));

        $this->hasOne('UserAssets', array(
             'local' => 'friendid',
             'foreign' => 'userid'));
    }
}