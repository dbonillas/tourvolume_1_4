<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('UserTbl', 'doctrine');

/**
 * BaseUserTbl
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $user_id
 * @property string $username
 * @property string $password
 * @property string $sha1_password
 * @property string $email
 * @property integer $acct_type
 * @property timestamp $datecreated
 * @property timestamp $lastlogin
 * @property timestamp $created_at
 * @property Doctrine_Collection $UserAssets
 * 
 * @method integer             getId()            Returns the current record's "id" value
 * @method integer             getUserId()        Returns the current record's "user_id" value
 * @method string              getUsername()      Returns the current record's "username" value
 * @method string              getPassword()      Returns the current record's "password" value
 * @method string              getSha1Password()  Returns the current record's "sha1_password" value
 * @method string              getEmail()         Returns the current record's "email" value
 * @method integer             getAcctType()      Returns the current record's "acct_type" value
 * @method timestamp           getDatecreated()   Returns the current record's "datecreated" value
 * @method timestamp           getLastlogin()     Returns the current record's "lastlogin" value
 * @method timestamp           getCreatedAt()     Returns the current record's "created_at" value
 * @method Doctrine_Collection getUserAssets()    Returns the current record's "UserAssets" collection
 * @method UserTbl             setId()            Sets the current record's "id" value
 * @method UserTbl             setUserId()        Sets the current record's "user_id" value
 * @method UserTbl             setUsername()      Sets the current record's "username" value
 * @method UserTbl             setPassword()      Sets the current record's "password" value
 * @method UserTbl             setSha1Password()  Sets the current record's "sha1_password" value
 * @method UserTbl             setEmail()         Sets the current record's "email" value
 * @method UserTbl             setAcctType()      Sets the current record's "acct_type" value
 * @method UserTbl             setDatecreated()   Sets the current record's "datecreated" value
 * @method UserTbl             setLastlogin()     Sets the current record's "lastlogin" value
 * @method UserTbl             setCreatedAt()     Sets the current record's "created_at" value
 * @method UserTbl             setUserAssets()    Sets the current record's "UserAssets" collection
 * 
 * @package    tourvolume
 * @subpackage model
 * @author     Dave Bonillas
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUserTbl extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('user_tbl');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('user_id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('username', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('password', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('sha1_password', 'string', 40, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 40,
             ));
        $this->hasColumn('email', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('acct_type', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('datecreated', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00 00:00:00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('lastlogin', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00 00:00:00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('UserAssets', array(
             'local' => 'user_id',
             'foreign' => 'userid'));
    }
}