<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('UserAssets', 'doctrine');

/**
 * BaseUserAssets
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $userid
 * @property string $small
 * @property string $medium
 * @property string $large
 * @property string $username
 * @property integer $default_img
 * @property string $title
 * @property string $description
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property UserTbl $UserTbl
 * @property Doctrine_Collection $TvConcertgoerFriends
 * 
 * @method integer             getId()                   Returns the current record's "id" value
 * @method integer             getUserid()               Returns the current record's "userid" value
 * @method string              getSmall()                Returns the current record's "small" value
 * @method string              getMedium()               Returns the current record's "medium" value
 * @method string              getLarge()                Returns the current record's "large" value
 * @method string              getUsername()             Returns the current record's "username" value
 * @method integer             getDefaultImg()           Returns the current record's "default_img" value
 * @method string              getTitle()                Returns the current record's "title" value
 * @method string              getDescription()          Returns the current record's "description" value
 * @method timestamp           getCreatedAt()            Returns the current record's "created_at" value
 * @method timestamp           getUpdatedAt()            Returns the current record's "updated_at" value
 * @method UserTbl             getUserTbl()              Returns the current record's "UserTbl" value
 * @method Doctrine_Collection getTvConcertgoerFriends() Returns the current record's "TvConcertgoerFriends" collection
 * @method UserAssets          setId()                   Sets the current record's "id" value
 * @method UserAssets          setUserid()               Sets the current record's "userid" value
 * @method UserAssets          setSmall()                Sets the current record's "small" value
 * @method UserAssets          setMedium()               Sets the current record's "medium" value
 * @method UserAssets          setLarge()                Sets the current record's "large" value
 * @method UserAssets          setUsername()             Sets the current record's "username" value
 * @method UserAssets          setDefaultImg()           Sets the current record's "default_img" value
 * @method UserAssets          setTitle()                Sets the current record's "title" value
 * @method UserAssets          setDescription()          Sets the current record's "description" value
 * @method UserAssets          setCreatedAt()            Sets the current record's "created_at" value
 * @method UserAssets          setUpdatedAt()            Sets the current record's "updated_at" value
 * @method UserAssets          setUserTbl()              Sets the current record's "UserTbl" value
 * @method UserAssets          setTvConcertgoerFriends() Sets the current record's "TvConcertgoerFriends" collection
 * 
 * @package    tourvolume
 * @subpackage model
 * @author     Dave Bonillas
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUserAssets extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('user_assets');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('userid', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('small', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => 'http://concertassets.s3.amazonaws.com/userimages/sm_no_image.jpg',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('medium', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => 'http://concertassets.s3.amazonaws.com/userimages/md_no_image.jpg',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('large', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => 'http://concertassets.s3.amazonaws.com/userimages/lg_no_image.jpg',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('username', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('default_img', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('title', 'string', 75, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 75,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('UserTbl', array(
             'local' => 'userid',
             'foreign' => 'user_id'));

        $this->hasMany('TvConcertgoerFriends', array(
             'local' => 'userid',
             'foreign' => 'friendid'));
    }
}