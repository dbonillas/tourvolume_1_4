<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('TvConcertgoer', 'doctrine');

/**
 * BaseTvConcertgoer
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $userid
 * @property string $username
 * @property string $password
 * @property string $sha1_password
 * @property string $firstname
 * @property string $lastname
 * @property string $oldoryoung
 * @property string $gender
 * @property integer $age
 * @property string $email
 * @property string $ipod
 * @property string $headline
 * @property string $aboutme
 * @property string $greatpeople
 * @property string $movies
 * @property string $interests
 * @property string $img
 * @property integer $counter
 * @property integer $activateflag
 * @property timestamp $lastlogin
 * @property string $genremusic
 * @property string $asstype
 * @property string $city
 * @property string $state
 * @property string $state_abv
 * @property string $country
 * @property string $knowme
 * @property timestamp $datecreated
 * @property string $levelid
 * @property float $latitude
 * @property float $longitude
 * @property integer $zipcode
 * @property string $lastfm
 * @property string $pandora
 * @property Doctrine_Collection $TvConcertgoerBands
 * @property Doctrine_Collection $TvConcertgoerFriends
 * @property Doctrine_Collection $TvConcertgoerFriends_2
 * @property Doctrine_Collection $TvConcertgoerMessages
 * @property Doctrine_Collection $TvConcertgoerMessages_2
 * 
 * @method integer             getId()                      Returns the current record's "id" value
 * @method integer             getUserid()                  Returns the current record's "userid" value
 * @method string              getUsername()                Returns the current record's "username" value
 * @method string              getPassword()                Returns the current record's "password" value
 * @method string              getSha1Password()            Returns the current record's "sha1_password" value
 * @method string              getFirstname()               Returns the current record's "firstname" value
 * @method string              getLastname()                Returns the current record's "lastname" value
 * @method string              getOldoryoung()              Returns the current record's "oldoryoung" value
 * @method string              getGender()                  Returns the current record's "gender" value
 * @method integer             getAge()                     Returns the current record's "age" value
 * @method string              getEmail()                   Returns the current record's "email" value
 * @method string              getIpod()                    Returns the current record's "ipod" value
 * @method string              getHeadline()                Returns the current record's "headline" value
 * @method string              getAboutme()                 Returns the current record's "aboutme" value
 * @method string              getGreatpeople()             Returns the current record's "greatpeople" value
 * @method string              getMovies()                  Returns the current record's "movies" value
 * @method string              getInterests()               Returns the current record's "interests" value
 * @method string              getImg()                     Returns the current record's "img" value
 * @method integer             getCounter()                 Returns the current record's "counter" value
 * @method integer             getActivateflag()            Returns the current record's "activateflag" value
 * @method timestamp           getLastlogin()               Returns the current record's "lastlogin" value
 * @method string              getGenremusic()              Returns the current record's "genremusic" value
 * @method string              getAsstype()                 Returns the current record's "asstype" value
 * @method string              getCity()                    Returns the current record's "city" value
 * @method string              getState()                   Returns the current record's "state" value
 * @method string              getStateAbv()                Returns the current record's "state_abv" value
 * @method string              getCountry()                 Returns the current record's "country" value
 * @method string              getKnowme()                  Returns the current record's "knowme" value
 * @method timestamp           getDatecreated()             Returns the current record's "datecreated" value
 * @method string              getLevelid()                 Returns the current record's "levelid" value
 * @method float               getLatitude()                Returns the current record's "latitude" value
 * @method float               getLongitude()               Returns the current record's "longitude" value
 * @method integer             getZipcode()                 Returns the current record's "zipcode" value
 * @method string              getLastfm()                  Returns the current record's "lastfm" value
 * @method string              getPandora()                 Returns the current record's "pandora" value
 * @method Doctrine_Collection getTvConcertgoerBands()      Returns the current record's "TvConcertgoerBands" collection
 * @method Doctrine_Collection getTvConcertgoerFriends()    Returns the current record's "TvConcertgoerFriends" collection
 * @method Doctrine_Collection getTvConcertgoerFriends2()   Returns the current record's "TvConcertgoerFriends_2" collection
 * @method Doctrine_Collection getTvConcertgoerMessages()   Returns the current record's "TvConcertgoerMessages" collection
 * @method Doctrine_Collection getTvConcertgoerMessages2()  Returns the current record's "TvConcertgoerMessages_2" collection
 * @method TvConcertgoer       setId()                      Sets the current record's "id" value
 * @method TvConcertgoer       setUserid()                  Sets the current record's "userid" value
 * @method TvConcertgoer       setUsername()                Sets the current record's "username" value
 * @method TvConcertgoer       setPassword()                Sets the current record's "password" value
 * @method TvConcertgoer       setSha1Password()            Sets the current record's "sha1_password" value
 * @method TvConcertgoer       setFirstname()               Sets the current record's "firstname" value
 * @method TvConcertgoer       setLastname()                Sets the current record's "lastname" value
 * @method TvConcertgoer       setOldoryoung()              Sets the current record's "oldoryoung" value
 * @method TvConcertgoer       setGender()                  Sets the current record's "gender" value
 * @method TvConcertgoer       setAge()                     Sets the current record's "age" value
 * @method TvConcertgoer       setEmail()                   Sets the current record's "email" value
 * @method TvConcertgoer       setIpod()                    Sets the current record's "ipod" value
 * @method TvConcertgoer       setHeadline()                Sets the current record's "headline" value
 * @method TvConcertgoer       setAboutme()                 Sets the current record's "aboutme" value
 * @method TvConcertgoer       setGreatpeople()             Sets the current record's "greatpeople" value
 * @method TvConcertgoer       setMovies()                  Sets the current record's "movies" value
 * @method TvConcertgoer       setInterests()               Sets the current record's "interests" value
 * @method TvConcertgoer       setImg()                     Sets the current record's "img" value
 * @method TvConcertgoer       setCounter()                 Sets the current record's "counter" value
 * @method TvConcertgoer       setActivateflag()            Sets the current record's "activateflag" value
 * @method TvConcertgoer       setLastlogin()               Sets the current record's "lastlogin" value
 * @method TvConcertgoer       setGenremusic()              Sets the current record's "genremusic" value
 * @method TvConcertgoer       setAsstype()                 Sets the current record's "asstype" value
 * @method TvConcertgoer       setCity()                    Sets the current record's "city" value
 * @method TvConcertgoer       setState()                   Sets the current record's "state" value
 * @method TvConcertgoer       setStateAbv()                Sets the current record's "state_abv" value
 * @method TvConcertgoer       setCountry()                 Sets the current record's "country" value
 * @method TvConcertgoer       setKnowme()                  Sets the current record's "knowme" value
 * @method TvConcertgoer       setDatecreated()             Sets the current record's "datecreated" value
 * @method TvConcertgoer       setLevelid()                 Sets the current record's "levelid" value
 * @method TvConcertgoer       setLatitude()                Sets the current record's "latitude" value
 * @method TvConcertgoer       setLongitude()               Sets the current record's "longitude" value
 * @method TvConcertgoer       setZipcode()                 Sets the current record's "zipcode" value
 * @method TvConcertgoer       setLastfm()                  Sets the current record's "lastfm" value
 * @method TvConcertgoer       setPandora()                 Sets the current record's "pandora" value
 * @method TvConcertgoer       setTvConcertgoerBands()      Sets the current record's "TvConcertgoerBands" collection
 * @method TvConcertgoer       setTvConcertgoerFriends()    Sets the current record's "TvConcertgoerFriends" collection
 * @method TvConcertgoer       setTvConcertgoerFriends2()   Sets the current record's "TvConcertgoerFriends_2" collection
 * @method TvConcertgoer       setTvConcertgoerMessages()   Sets the current record's "TvConcertgoerMessages" collection
 * @method TvConcertgoer       setTvConcertgoerMessages2()  Sets the current record's "TvConcertgoerMessages_2" collection
 * 
 * @package    tourvolume
 * @subpackage model
 * @author     Dave Bonillas
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTvConcertgoer extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('tv_concertgoer');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('userid', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('username', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('password', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('sha1_password', 'string', 40, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 40,
             ));
        $this->hasColumn('firstname', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('lastname', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('oldoryoung', 'string', 6, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => 'old',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 6,
             ));
        $this->hasColumn('gender', 'string', 25, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('age', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('email', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('ipod', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('headline', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('aboutme', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('greatpeople', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('movies', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('interests', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('img', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => 'http://concertassets.s3.amazonaws.com/userimages/md_no_image.jpg',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('counter', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('activateflag', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('lastlogin', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00 00:00:00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('genremusic', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('asstype', 'string', 25, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('city', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('state', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('state_abv', 'string', 10, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 10,
             ));
        $this->hasColumn('country', 'string', 25, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => 'United States',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('knowme', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('datecreated', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00 00:00:00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('levelid', 'string', 5, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => 'group',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 5,
             ));
        $this->hasColumn('latitude', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('longitude', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('zipcode', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('lastfm', 'string', 75, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 75,
             ));
        $this->hasColumn('pandora', 'string', 75, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 75,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('TvConcertgoerBands', array(
             'local' => 'userid',
             'foreign' => 'userid'));

        $this->hasMany('TvConcertgoerFriends', array(
             'local' => 'userid',
             'foreign' => 'userid'));

        $this->hasMany('TvConcertgoerFriends as TvConcertgoerFriends_2', array(
             'local' => 'userid',
             'foreign' => 'friendid'));

        $this->hasMany('TvConcertgoerMessages', array(
             'local' => 'userid',
             'foreign' => 'toid'));

        $this->hasMany('TvConcertgoerMessages as TvConcertgoerMessages_2', array(
             'local' => 'userid',
             'foreign' => 'fromid'));
    }
}